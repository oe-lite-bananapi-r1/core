## Class for building u-boot images.
##
## The u-boot class is used for integration of Das U-Boot bootloader in OE-lite
## BSP projects.
##
## The USE flags are typically set in the machine configuration file,
## fx. conf/machine/myboard.conf
##
## ----
## MACHINE_USE_uboot_config = "myboard_config"
## MACHINE_USE_uboot_maxsize = "261124"
## ----
## 
## The USE_uboot_config flag is the argument given to make to configure
## for the (MACHINE specific) board.
## 
## Fx.
## 
## ----
## make foo_bar_config
## ----
## 
## is achieved by setting USE_uboot_config to "foo_bar_config"
## 
## This of-course requires that the U-Boot source code has support for
## the given board configuration.
## 
## The USE_uboot_extra_env flag is used to modify (append to)
## CONFIG_EXTRA_ENV_SETTINGS macro in the U-Boot configuration header file.
## The header file is specified by the USE_uboot_config_file flag.
## 
## The USE_uboot_maxsize flag can be used to specify a maximum allowed size of
## the U-Boot image file (in bytes).
## 
## The output from the U-Boot recipe is both a u-boot.bin and an ELF u-boot file.
## 
## For BSP's requiring a different type of image file, the U-Boot recipe is
## either extended to support that, or a new recipe for the image file is created
## which RDEPENDS on one of the packages from the U-Boot recipe.
## 
## Integration of Barebox development in a project specific barebox.git
## repository is done by adding a new barebox recipe in the project specific
## OE-lite recipes directory, fx. project-barebox.oe:
## 
## ----
## DESCRIPTION = "Project specific U-Boot bootloader"
## inherit u-boot
## SRC_URI = "git://...../u-boot.git"
## ----
##
## @var UBOOT_BOOT_SCRIPT_FILE Filename for deployed boot script
## @var UBOOT_BOOT_SCRIPT_COMMANDS File with u-boot env commands to be converted to
##      boot script

DESCRIPTION ?= "Das U-Boot -- the Universal Boot Loader"
HOMEPAGE ?= "http://www.denx.de/wiki/U-Boot"
LICENSE ?= "GPL"

require conf/u-boot.conf

RECIPE_TYPES = "machine"

inherit c make kernel-arch

CLASS_DEPENDS += "native:util/mkimage"

# Why bother?  U-Boot will most likely stay broken for parallel builds
PARALLEL_MAKE = ""

EXTRA_OEMAKE = "${EXTRA_OEMAKE_ARCH} CROSS_COMPILE=${TARGET_PREFIX}"
EXTRA_OEMAKE_ARCH ?= "ARCH=${KERNEL_ARCH}"

CFLAGS[unexport]   = "1"
CPPFLAGS[unexport] = "1"
LDFLAGS[unexport]  = "1"

do_configure[prefuncs] += "${DO_CONFIGURE_EXTRAENV}"
DO_CONFIGURE_EXTRAENV = ""
DO_CONFIGURE_EXTRAENV:USE_uboot_extra_env = "do_configure_extraenv"
def do_configure_extraenv(d):
    from oebakery import debug, info, warn, err, die
    config_filename = os.path.join("include/configs",
                                   d.get("USE_uboot_config_file"))
    extra_env_lines = []
    for line in (d.get("USE_uboot_extra_env").splitlines()):
        line = line.strip()
        if not line:
            continue
        extra_env_lines.append('\t"%s\\0"'%(line,))
    try:
        with open(config_filename) as config_file:
            config = config_file.read()
    except:
        err("Failed to open file %s"%(config_filename))
        return False
    # Search to the CONFIG_EXTRA_ENV_SETTINGS define
    define = re.search(r"^#define[ \t]+CONFIG_EXTRA_ENV_SETTINGS[ \t]+",
                       config, re.MULTILINE)
    if not define:
        print "ERROR: cannot find CONFIG_EXTRA_ENV_SETTINGS in %s"%(
            config_filename)
        return False
    # Get the current define value
    current = re.match(r"([^\n]*\\\n)*([^\n]*\n)",
                       config[define.end():])
    last_line = config[define.end()+current.start(2):
                           define.end()+current.end(2)].strip()
    # Write out config file with USE_uboot_extra_env inserted
    with open(config_filename, "w") as config_file:
        config_file.write(config[:define.end() + current.end(1)])
        if last_line:
            config_file.write(config[define.end() + current.start(2):
                                         define.end() + current.end(2) - 1] +
                              " \\\n")
        config_file.write(" \\\n".join(extra_env_lines) + "\n")
        if last_line:
            config_file.write(config[define.end() + current.end(2):])
        else:
            config_file.write(config[define.end() + current.start(2):])
    return True

do_configure () {
    oe_runmake ${USE_uboot_config}
}

UBOOT_BOOT_SCRIPT_FILE = "boot.scr"

do_compile () {
    oe_runmake ${UBOOT_IMAGE}
    if [ -n ${UBOOT_BOOT_SCRIPT_FILE} -a -n ${UBOOT_BOOT_SCRIPT_COMMANDS} ] ; then
        ./tools/mkimage -T script -C none -n 'OE-lite BananaPi R1 boot script' -d  ${UBOOT_BOOT_SCRIPT_COMMANDS} ${UBOOT_BOOT_SCRIPT_FILE}
    fi
}

# Support checking the u-boot image size
inherit sizecheck
UBOOT_SIZECHECK = ""
UBOOT_SIZECHECK:USE_uboot_maxsize = "${UBOOT_IMAGE_FILENAME}:${USE_uboot_maxsize}"
SIZECHECK += "${UBOOT_SIZECHECK}"

do_install () {
    install -d ${D}${bootdir}
    install -m 0644 ${UBOOT_IMAGE_FILENAME} ${D}${bootdir}
    install -m 0644 ${UBOOT_IMAGE_BASE} ${D}${bootdir}
    if [ -a ${UBOOT_BOOT_SCRIPT_FILE} ] ; then
        install -m 0644 ${UBOOT_BOOT_SCRIPT_FILE} \
            ${D}${bootdir}
    fi
}

PACKAGES = "${PN} ${PN}-elf ${PN}-bootscript"
FILES_${PN} = "${bootdir}/${UBOOT_IMAGE_FILENAME}"
FILES_${PN}-bootscript = "${bootdir}/${UBOOT_BOOT_SCRIPT_FILE}"
FILES_${PN}-elf = "${bootdir}/${UBOOT_IMAGE_BASE}"

PROVIDES_${PN} = "u-boot"
PROVIDES_${PN}-elf = "u-boot-elf"

addtask deploy before build after compile
do_deploy[dirs] = "${IMAGE_DEPLOY_DIR} ${S}"
REBUILD ?= "1"

do_deploy () {
    install -m 0644 ${UBOOT_IMAGE_FILENAME} \
	${IMAGE_DEPLOY_DIR}/${UBOOT_IMAGE_DEPLOY_FILE}
    md5sum <${UBOOT_IMAGE_FILENAME} \
	>${IMAGE_DEPLOY_DIR}/${UBOOT_IMAGE_DEPLOY_FILE}.md5

    cd ${IMAGE_DEPLOY_DIR}
    if [ -n "${UBOOT_IMAGE_DEPLOY_LINK}" ] ; then
	for ext in "" ".md5"; do
	    rm -f  ${UBOOT_IMAGE_DEPLOY_LINK}$ext
	    ln -sf ${UBOOT_IMAGE_DEPLOY_FILE}$ext \
		   ${UBOOT_IMAGE_DEPLOY_LINK}$ext
	done
    fi
}

## @useflag uboot_srec Enable compilation of srec. Default disabled.
CLASS_FLAGS += "uboot_srec"

UBOOT_SREC_IMAGE = "${UBOOT_IMAGE_BASE}.s19"
UBOOT_SREC_IMAGE_DEPLOY_EXT ?= ".s19"
UBOOT_SREC_IMAGE_DEPLOY_FILE ?= "${MACHINE}-${UBOOT_IMAGE_DEPLOY_NAME}-${PV}-${DATETIME}${UBOOT_SREC_IMAGE_DEPLOY_EXT}"
UBOOT_SREC_IMAGE_DEPLOY_LINK ?= "${MACHINE}-${UBOOT_IMAGE_DEPLOY_NAME}${UBOOT_SREC_IMAGE_DEPLOY_EXT}"

do_compile[postfuncs] += "${DO_COMPILE_SREC}"
DO_COMPILE_SREC:USE_uboot_srec = "do_compile_srec"
do_compile_srec () {
	srec_cat ${UBOOT_IMAGE_FILENAME} -Binary -o ${UBOOT_SREC_IMAGE} -Motorola
}

do_install[postfuncs] += "${DO_INSTALL_SREC}"
DO_INSTALL_SREC:USE_uboot_srec = "do_install_srec"
do_install_srec () {
	install -m 0644 ${UBOOT_SREC_IMAGE} ${D}${bootdir}
}

PACKAGES += "${PN}-srec"
FILES_${PN}-srec = "${bootdir}/${UBOOT_SREC_IMAGE}"
PROVIDES_${PN}-srec = "u-boot-srec"

do_deploy[postfuncs] += "${DO_DEPLOY_SREC}"
DO_DEPLOY_SREC:USE_uboot_srec = "do_deploy_srec"
do_deploy_srec () {
	install -m 0644 ${UBOOT_SREC_IMAGE} \
		${IMAGE_DEPLOY_DIR}/${UBOOT_SREC_IMAGE_DEPLOY_FILE}
	md5sum <${UBOOT_IMAGE_FILENAME} \
		>${IMAGE_DEPLOY_DIR}/${UBOOT_SREC_IMAGE_DEPLOY_FILE}.md5

	cd ${IMAGE_DEPLOY_DIR}
	if [ -n "${UBOOT_SREC_IMAGE_DEPLOY_LINK}" ] ; then
		for ext in "" ".md5"; do
			rm -f  ${UBOOT_SREC_IMAGE_DEPLOY_LINK}$ext
			ln -sf ${UBOOT_SREC_IMAGE_DEPLOY_FILE}$ext \
			       ${UBOOT_SREC_IMAGE_DEPLOY_LINK}$ext
		done
	fi
}

# Local Variables:
# mode: python
# End:
